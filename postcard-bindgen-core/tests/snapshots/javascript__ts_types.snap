---
source: postcard-bindgen-core/tests/javascript.rs
expression: ts_file
---
declare type u8 = number
declare type u16 = number
declare type u32 = number
declare type u64 = bigint
declare type u128 = bigint
declare type usize = bigint
declare type i8 = number
declare type i16 = number
declare type i32 = number
declare type i64 = bigint
declare type i128 = bigint
declare type isize = bigint
declare type NonZeroU8 = number
declare type NonZeroU16 = number
declare type NonZeroU32 = number
declare type NonZeroU64 = bigint
declare type NonZeroU128 = bigint
declare type NonZeroUsize = bigint
declare type NonZeroI8 = number
declare type NonZeroI16 = number
declare type NonZeroI32 = number
declare type NonZeroI64 = bigint
declare type NonZeroI128 = bigint
declare type NonZeroIsize = bigint
declare type f32 = number
declare type f64 = number

declare type ArrayLengthMutationKeys = "splice" | "push" | "pop" | "shift" | "unshift"
declare type FixedLengthArray<T, L extends number, TObj = [T, ...Array<T>]> =
    Pick<TObj, Exclude<keyof TObj, ArrayLengthMutationKeys>>
    & {
        readonly length: L
        [ I : number ] : T
        [Symbol.iterator]: () => IterableIterator<T>
    }

export type StructType = { field_1: u32, field_2: string, field_3: u32[], field_4: StructType[], field_5: { start: u32, end: u32 }, field_6: {[key: string]: u32;}, field_7: Map<u32, u32>, field_8: u32 | undefined, field_9: boolean, field_10: [u32, string], field_11: FixedLengthArray<string, 3>, field_12: u32[], field_13: f32 }
export type UnitStructType = { }
export type TupleStructType = [u32, string]
export type EnumType = { tag: "AVariant" } | { tag: "BVariant", value: [u32, string] } | { tag: "CVariant", value: { field_1: u32, field_2: string, struct_type: StructType } }

export type Type = "StructType" | "UnitStructType" | "TupleStructType" | "EnumType"
declare type ValueType<T extends Type> = T extends "StructType" ? StructType : T extends "UnitStructType" ? UnitStructType : T extends "TupleStructType" ? TupleStructType : T extends "EnumType" ? EnumType : void

export function serialize<T extends Type>(type: T, value: ValueType<T>): Uint8Array

export interface Result<T extends Type> {
    value: ValueType<T>;
    bytes: Uint8Array;
}

export function deserialize<T extends Type>(type: T, bytes: Uint8Array): Result<T>
